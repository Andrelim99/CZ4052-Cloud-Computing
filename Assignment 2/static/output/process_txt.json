{"text": "CE/CZ4052Cloud ComputingDistributed Computingvia SaaS: API, RESTDr. Tan, Chee WeiEmail: cheewei.tan@ntu.edu.sgOffice: N4-02c-104Traditional web applications\nClientServerGET /the-resource...200 OK<html>Code...</html>\nDisplays the page, then user clickson link.GET /another-resource...200 OK<html>Code...</html>\nDisplays the other page, ...Traditional web applicationsThe interface is built on HTML & HTTP.\u2022Drawbacks:\u2013The client must understand both HTTP and HTML.\u2013The entire webpage is replaced with another one.\u2022No way to animate transitions between webpages.\u2013Same data is usually sent in multiple responses.\u2022E.g. HTML code for the layout.Traditional web applications\nClientServer\nHTTP & HTMLClient???\u2022HTTP & HTML can be used, but is not optimal.\u2022The GUI on smartphones does not use HTML.\u2022E.g. GET /users/3:\n<h1>Claire</h1><p>Claire is 24 years old and lives in Boston.</p>NameAgeCityApplication Programming InterfaceAn API is an interface for Machine \u2194 Machine communication.\u2022An API making use of HTTP is called a Web API.A GUI is an interface for Human \u2194 Machine communication.\nServer\nClientAPIGUI\nUserDifferent types of Web APIs\u2022Remote Procedure Call, RPC.\u2013Clients can call functions on the server.\u2022Remote Method Invocation, RMI.\u2013Clients can call methods on objects on the server.\u2022Representational State Transfer, REST.\u2013Clients can apply CRUD operations on resources on the server.What is REST?An architectural style for distributed hypermedia systems described by Roy Thomas Fielding in his doctoral dissertation 2000.\u2022Consists of constraints:1.Client - Server2.Stateless3.Cache4.Uniform Interface5.Layered System6.Code-On-DemandClientServerServerRelationalDatabaseWeb ApplicationWeb BrowserHTTPSQLhttps://en.wikipedia.org/wiki/Roy_FieldingWhat does REST mean?The name \"Representational State Transfer\" is intended to evoke an image of how a well-designed Web application behaves: a network of web pages (a virtual state-machine), where the user progresses through the application by selecting links (state transitions), resulting in the next page (representing the next state of the application) being transferred to the user and rendered for their use.From Roy's dissertation.What does REST mean?\nServer\nIdName1Alice2Bob3ClaireUsers\nClientGET /users/2...{\"id\": 2, \"name\": \"Bob\"}\nChanges state.{\"id\": 2, \"name\": \"Obi\"}PUT /users/2{\"id\": 2, \"name\": \"Obi\"}Using HTTP as the Uniform Interface\u2022Use URIs to identify resources.\u2022Use HTTP methods to specify operation:\u2013Create: POST (or PUT)\u2013Retrieve: GET\u2013Update: PUT (or PATCH)\u2013Delete: DELETE\u2022Use HTTP headersContent-Type and Acceptto specify data format for the resources.\u2022Use HTTP status code to indicate success/failure.BadPOST /loginPOST /create-bookGET /get-top-10-booksGoodPOST /login-sessionsPOST /booksGET /top-10-booksUsing HTTP as the Uniform InterfaceREST is an architectural style, not a specification.\u2022In practice, it can be used in many different ways.\u2013But some are better than others.Good recommendations:\u2022Web API Design - Crafting Interfaces that Developers Love\u2013https://pages.apigee.com/rs/apigee/images/api-design-ebook-2012-03.pdfREST ExampleA server with information about users.\u2022The GET method is used to retrieve resources.\u2013GET /users\u2013GET /users/2\u2013GET /users/pages/1\u2013GET /users/gender/female\u2013GET /users/age/18\u2013GET /users/???\u2013GET /users/2/name\u2013GET /users/2/petsGET /users?page=1GET /users?gender=femaleGET /users?age=18GET /users?gender=female&age=18\nIdName1Alice2Bob3ClaireUsersREST ExampleA server with information about users.\u2022The GET method is used to retrieve resources.\u2013Which data format? Specified by the Accept header!\nGET /users HTTP/1.1Host: the-website.comAccept: application/json\nHTTP/1.1 200 OKContent-Type: application/jsonContent-Length: 66[  {\"id\": 1, \"name\": \"Alice\"},  {\"id\": 2, \"name\": \"Bob\"}]application/xml was popular before JSON.\nIdName1Alice2Bob3ClaireUsersREST ExampleA server with information about users.\u2022The POST method is used to create resources.\u2013Which data format? Specified by the Accept and Content-Type header!\nPOST /users HTTP/1.1Host: the-website.comAccept: application/jsonContent-Type: application/xmlContent-Length: 49<user>  <name>Claire</name></user>\nHTTP/1.1 201 CreatedLocation: /users/3Content-Type: application/jsonContent-Length: 28{\"id\": 3, \"name\": \"Claire\"}\nIdName1Alice2Bob3ClaireUsersREST ExampleA server with information about users.\u2022The PUT method is used to update an entire resource.\nPUT /users/3 HTTP/1.1Host: the-website.comContent-Type: application/xmlContent-Length: 52<user>  <id>3</id>  <name>Cecilia</name></user>\nHTTP/1.1 204 No ContentPUT can also be used to create a resource if you know which URI it should have in advance.\nIdName1Alice2Bob3ClaireUsersREST ExampleA server with information about users.\u2022The DELETE method is used to delete a resource.\nDELETE /users/2 HTTP/1.1Host: the-website.com\nHTTP/1.1 204 No Content\nIdName1Alice2Bob3ClaireUsersREST ExampleA server with information about users.\u2022The PATCH method is used to update parts of a resource.\nPATCH /users/1 HTTP/1.1Host: the-website.comContent-Type: application/xmlContent-Length: 37<user>  <name>Amanda</human></user>\nHTTP/1.1 204 No ContentThe PATCH method is only a proposed standard.\nIdName1Alice2Bob3ClaireUsersREST ExampleA server with information about users.\u2022What if something goes wrong?\u2013Use the HTTP status codes to indicate success/failure.\nGET /users/999 HTTP/1.1Host: the-website.comAccept: application/json\nHTTP/1.1 404 Not Found\u2022Read more about the different status codes at:\u2022http://www.restapitutorial.com/httpstatuscodes.html \u2022Optionally include error messages in the response body.\nIdName1Alice2Bob3ClaireUsersDesigning a REST APIHow should you think?\u2022Make it as easy as possible to use by other programmers.Facebook:\u2013Always return 200 OK.\u2013GET /v2.7/{user-id}\u2013GET /v2.7/{post-id}\u2013GET /v2.7/{user-id}/friends\u2013GET /v2.7/{object-id}/likesDesigning a REST APIHow should you think?\u2022Make it as easy as possible to use by other programmers.Twitter:\u2013Only use GET and POST.\u2013GET  /1.1/users/show.json?user_id=2244994945\u2013POST /1.1/favorites/destroy.json?id=243138128959913986CS193X:Web ProgrammingFundamentalsSpring 2017Victoria Kirst(vrk@stanford.edu)ScheduleToday:-Querying REST APIs-Form submission-Fetch API gotchas-CORS-Closures-Single-threaded asynchrony-JS Event loopMonday: NodeJS!JSONJavaScript Object NotationJSON: Stands for JavaScript Object Notation-Created by Douglas Crockford-Defines a way of serializing JavaScript objects-to serialize: to turn an object into a string that can be deserialized-to deserialize: to turn a serialized string into an objectFetch API and JSONThe Fetch API also has built-in support for JSON:function onJsonReady(json) {  console.log(json);}function onResponse(response) {  return response.json();}fetch('images.json')    .then(onResponse)    .then(onJsonReady);Return response.json() instead of response.text() and Fetch will essentially call JSON.parse() on the response string.Querying REST APIsRESTful APIRESTful API: URL-based API that has these properties:-Requests are sent as an HTTP request:-HTTP Methods: GET, PUT, POST, DELETE, etc-Requests are sent to base URL, also known as an \"API Endpoint\"-Requests are sent with a specified MIME/content type, such as HTML, CSS, JavaScript, plaintext, JSON, etc.API endpoint example\n-presentation: Tells the server that we are requesting a doc of type \"presentation\"-d/1Rim3-IXt6yN7yny_SBv7B5NMBiYbaQEiRMUD5s66uN8: Tells the server to request a doc (\"d\") with the document id of \"1Rim3-IXt6yN7yny_SBv7B5NMBiYbaQEiRMUD5s66uN8\"Look at the URL for this Google slide deck:https://docs.google.com/presentation/d/1Rim3-IXt6yN7yny_SBv7B5NMBiYbaQEiRMUD5s66uN8RESTful APIAlmost every website on the internet uses RESTful URLs / RESTful APIs to handle requests to its servers.Notable alternatives to REST:-GraphQL, -Used by Facebook since 2012-Open-sourced by Facebook since 2015-Still early but some big clients: GitHub, Pinterest-Falcor?-Netflix's REST alternative, introduced ~2015-Probably cool but never hear of anyone using it-Doesn't even have a Wikipedia pageUsing REST APIs3rd-Party APIsMany websites expose REST APIs to outside developers. These are often called \"3rd-party APIs\" or \"Developer APIs\"Examples:-Spotify-Giphy-GitHub-Hoards of Google APIs-Facebook-Instagram-Twitter-etc...Try Googling \"<product name> API\" to see if one exists for a given company!Example: SpotifySpotify has a REST API that external developers (i.e. people who aren't Spotify employees) can query:\nExample: SpotifyREST API structure (details): -The Base URL is https://api.spotify.com-The HTTP method is GET-The API endpoint to query is: https://api.spotify.com/v1/albums/<spotify_id>-It returns JSON data about the album that's requested\nExample: SpotifyIf we had Spotify Album ID 7aDBFWp72Pz4NZEtVBANi9, how would we make a GET request for the album information?REST API structure (details): -The Base URL is https://api.spotify.com-The HTTP method is GET-The API endpoint to query is: https://api.spotify.com/v1/albums/<spotify_id>-It returns JSON data about the album that's requestedGET request: Browse to URLLoading a URL in a browser issues an HTTP GET request for that resource.So if we just piece together this URL:-API Endpoint: https://api.spotify.com/v1/albums/<spotify_id>-Album ID: 7aDBFWp72Pz4NZEtVBANi9-Request URL:https://api.spotify.com/v1/albums/7aDBFWp72Pz4NZEtVBANi9If you click on the link, you see it returns a JSON object.GET request: fetch()Actually, the fetch() API also issues an HTTP GET request by default. So if we do:fetch('https://api.spotify.com/v1/albums/7aDBFWp72Pz4NZEtVBANi9')    .then(onResponse)    .then(onTextReady);...we can load the JSON data as a JavaScript object, as we did with our .json files!(CodePen / demo)Album exampleLet's write a web page that asks the user to enter an artist's name, then displays the albums of that artist, as provided by the Spotify Search API. (live demo)\nSpotify search APISpotify Search URL:https://api.spotify.com/v1/search?type=album&q=queryE.g. https://api.spotify.com/v1/search?type=album&q=beyonceQ: Hey, what's that at the end of the URL?-?type=album&q=beyonceQuery parametersYou can pass parameters to HTTP GET requests by adding query parameters to the URL:?type=album&q=beyonce-Defined as key-value pairs-param=value-The first query parameter starts with a ?-Subsequent query parameters start with &Reminder: HTML elements\nSingle-line text input:In JavaScript, you can read and set the input text via inputElement.valueSome other input types:-Select-Textarea-CheckboxForm submitQ: What if you want the form to submit after you click \"enter\"?  \nForm submit1.Wrap your input elements in a <form> \nYou should also use <input type=\"submit\"> instead of <button> for the reason on the next slide...Form submit2. Listen for the 'submit' event on the form element:\nThis is why you want to use <input type=\"submit\"> instead of <button> -- the 'submit' event will fire on click for but not <button>.Form submit3. Prevent the default action before handling the event through event.preventDefault():\nThe page will refresh on submit unless you explicitly prevent it.\nAlbum exampleSolution: GitHub / Demo\nOther REST APIsGiphy API\nhttps://github.com/Giphy/GiphyAPI#search-endpoint\nYelp API\nhttps://www.yelp.com/developers/documentation/v3/business_search\nFetch gotchasCORS errorIf you try to fetch() this JSON file:http://web.stanford.edu/class/cs193x/lectures/18/albums.jsonYou get this error:\nQ: Why do we get this error, when the JSON file is served over HTTP?CORSCORS: Cross-Origin Resource Sharing (wiki)-Browser policies for what resources a web page can load-Cross-origin: between two different domains-If abc.com/users requests something from abc.com/search, it's still a same-origin request (not cross-origin) because it's the same domain-But if abc.com/foo requests something from xyz.com/foo, it's a cross-origin request.CORS summarized-You can make same-origin requests by default for any request type-You can make cross-origin requests by default for:-Images loaded via <img>-CSS files loaded via <link>-JavaScript files loaded via <script>-Etc-You cannot make cross-origin requests by default for:-Resources loaded via fetch() or XHRCORS configurationHowever, a web server can be configured to override these default rules:-If you want to allow other domains to make fetch() requests to your servers, you can configure your server to allow them (e.g. on apache)-All 3rd party APIs do this, otherwise you couldn't access them-If you don't want other domains to certain resources such as images, you can disallow themIn this classIn CS193X, we will either be:-Making same-origin requests-Making requests on APIs that have allowed cross-origin accessSo you don't need to do anything with CORS for CS193X.Still, CORS is good to know about:-Helps you understand error messages-You may have to deal with this in the future (common scenario: file:// trying to access an HTTP resource: HTTP resource must allow CORS for this to be allowed)Fetch and closuresWhat if instead of code like this in a class: (CodePen)\nFetch and closuresWe wrote code that looked like this, where onResponse and onJsonReady were inner functions (CodePen): \nFetch and closuresEven if we bind loadAlbums:\nWe get this error (CodePen):Closures and thisEvery function has its own \"this\" argument, meaning closures (inner functions) also have their own \"this\" arguments...\nClosures and thisSo even if you've bound the this value for loadAlbums, it doesn't bind the this value for the closures.\nxSolution 1: Bind explicitly\nYou can bind the closures to the this value of loadAlbums when it is called: (CodePen) Solution 2: Bind with =>Functions defined with the arrow syntax are auto-bound to the \"this\" of their enclosing context (CodePen):\nSolution 2: Bind with =>\nWe can also use the concise syntax:Single-threaded asynchronyRecall: Discography pageWe wrote a web page that lists the Mariah Carey albums stored in albums.json and lets us sort the albums: (CodePen / demo)\nError?!If we click on one of the buttons before the albums load, we get an error: Why?!\nOn page load\nAppalbums.jsonscript.jsWhen we first load the page, the following things happen immediately:\nSortButton1. Script creates App2. App creates SortButtons3. App requests albums.json through fetch()On page loadAppalbums.jsonscript.jsWhen the fetch() finishes, the app creates an Album object for each album that was fetched:\nAlbum4. fetch() finishes5. App creates Album objectsBefore fetch() returnsAppalbums.jsonscript.jsHowever, before the fetch() completes, a user might click the sort button: \nSortButtonClick event! \"App, you should sort your album data\"fetch() is still pendingThe albumInfo field  is filled out after the fetch() from loadAlbums() returns\nBut if the button is clicked before fetch() returns,  albumInfo is not defined yet and we get an error.\nAsynchronous events\nAppalbums.jsonscript.jsSortButtonClick event!Fetch finishes!We have written our code in a way that assumes fetch() will complete before clicking, but on a slow connection, that's not a safe assumption.General problemThe problem stated generically:-There are 2+ events that can occur at unpredictable times, and the two events are dependent on each other in some way(Some people call this a \"race condition\", though other people reserve the term for multiple threads only.)Clickevent!Fetch finishes!SolutionsYou can either \"force\" loading to occur before button click, for example: -Disable buttons until the JSON loads-OR: Don't show buttons until the JSON loads -OR: Don't show the UI at all until the JSON completesDon't show buttons until JSON is loaded ready: CodePenSolutionsOr you can make the button event handler work independent of the fetch call-Initialize albumInfo to an empty array in the constructor-Sorting nothing does nothing, which is fineCodePenSingle-threaded asynchronyIs it possible for the _onJsonReady function to fire *in the middle* of sortAlbums?\nThe browser is fetching albums.json...\n...User clicks a button, so the event handler is running\n...Is it possible that while the click handler is still running (still on the call stack), the fetch() callback also fires?\n...\nThe answer is No, because JavaScript is single-threaded.\n...\nSingle-threaded?Some hand-wavy definitions:-Single-threaded: -When your computer processes one command at a time-There is one call stack-Multi-threaded-When your computer processes multiple commands simultaneously-There is one call stack per threadthread: a linear sequence of instructions; an executable container for instructionsSingle-threaded JS-We create a new Album for each album in the JSON file-For each album, we create a new DOM Image\nQ: If in JavaScript, only one thing happens at a time, does that mean only one image loads at a time?Image loading\nEmpirically, that doesn't seem to be the case:Network tabIf we look at Chrome's Network tab, we see there are several images being loaded simultaneously:\nQ: If JavaScript is single-threaded, i.e. if only one thing happens at a time, how can images be loaded in parallel?JavaScript event loopNote: see talk!(For a perfectly great talk on this, see Philip Roberts' talk: https://www.youtube.com/watch?v=8aGhZQkoFbQ&t=1sAnd for a perfectly great deep dive on this, see Jake Archibald's blog post:https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/ These slides are inspired by these resources!)setTimeoutTo help us understand the event loop better, let's learn about a new command, setTimeout:setTimeout(function, delay);-function will fire after delay milliseconds-CodePen exampleCall stack + setTimeoutCall Stack\n(global function)Call stack + setTimeoutCall Stack\n(global function)\nCall stack + setTimeoutCall Stack\nconsole.log('Point A');(global function)Call stack + setTimeoutCall Stack\n(global function)Call stack + setTimeoutCall Stack\nsetTimeout(...);(global function)Call stack + setTimeoutCall Stack\n(global function)Call stack + setTimeoutCall Stack\nconsole.log('Point B');(global function)Call stack + setTimeoutCall Stack\n(global function)\nCall stack + setTimeoutCall Stack\nCall stack + setTimeoutCall Stack\nonTimerDone()\nCall stack + setTimeoutCall Stack\nonTimerDone()\nconsole.log('Point C');Call stack + setTimeoutCall Stack\nonTimerDone()\nCall stack + setTimeoutCall Stack\nonTimerDone()\nquerySelector('h1');Call stack + setTimeoutCall Stack\nonTimerDone()\nCall stack + setTimeoutCall Stack\nonTimerDone()\nCall stack + setTimeoutCall Stack\nCall stack + setTimeoutCall Stack\nsetTimeout(...);(global function)What \"enqueues\" onTimerDone? How does it get fired?Tasks, Micro-tasks,and the Event LoopTasks and the Event LoopCall Stack\n(global function)The JavaScript runtime can do only one thing at a time...setTimeout()Tasks and the Event LoopCall Stack\n(global function)setTimeout()But the JS runtime runs within a browser, which can do multiple things at a time.Call Stack\n(global function)setTimeout()Here's a picture of the major pieces involved in executing JavaScript code in the browser.\nBrowser internal implementation\nEvent loopTask QueueMicro-task queueJS execution\n-Call stack: JavaScript runtime call stack. Executes the JavaScript commands, functions.-Browser internal implementation: The C++ code that executes in response to native JavaScript commands, e.g. setTimeout, element.classList.add('style'), etc.JS execution\n-Call stack: JavaScript runtime call stack. Executes the JavaScript commands, functions.-Browser internal implementation: The C++ code that executes in response to native JavaScript commands, e.g. setTimeout, element.classList.add('style'), etc.The browser itself is multi-threaded and multi-process!JS execution\n-Task Queue:  When the browser internal implementation notices a callback from something like setTimeout or addEventListener is should be fired, it creates a Task and enqueues it in the Task QueueJS execution\n-Micro-task Queue: Promises are special tasks that execute with higher priority than normal tasks, so they have their own special queue. (see details here) JS execution\nEvent loop: Processes the task queues.-When the call stack is empty, the event loop pulls the next task from the task queues and puts it on the call stack.-The Micro-task queue has higher priority than the Task Queue.DemoPhilip Roberts wrote a nice visualizer for the JS event loop:-setTimeout-With click"}