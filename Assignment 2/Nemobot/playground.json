{"thirdPartyDependencies":[],"code":"/** Handle the user message.\n * @param {string} payload the message sent by user\n * @param {AppState} state the state of the app\n * @param {Tool} tools available tools to perform a task\n */\nasync function run(payload, state, tools) {\n  let yn_res = null;\n  let question = \"Has the PDF been uploaded?\";\n  \n  yn_res = state.prev_request_is_pdf ?\n  JSON.parse(await tools.yesOrNo({question: question, answer: payload})) :\n  JSON.parse(await tools.is_user_asking_to_use_pdf({userMessage: payload}));\n\n  // user requesting for pdf quiz\n  if(yn_res.yes && !state.prev_request_is_pdf){    \n    //Ask user if uploaded PDF\n    tools.reply(`Reply 'Yes' once the PDF has been uploaded here: ${state.base_api}`);\n    state.prev_request_is_pdf = true;\n    return;\n   }\n  \n  // Check if PDF Uploaded\n  else if(yn_res.yes && state.prev_request_is_pdf){\n    state.uploaded_pdf = true;\n    tools.reply(\"Please specify the number of questions and difficulty for the quiz.\")\n  }\n\n  else if(!yn_res.yes && state.prev_request_is_pdf && !state.uploaded_pdf){\n    state.uploaded_pdf = false;\n    state.prev_request_is_pdf = false;\n    tools.reply(\"Resetting... What type of quiz would you like me to generate?\")\n  }\n\n  else{\n    // Get quiz details\n    const {num, diff} = JSON.parse(await tools.quiz_details({userMessage: payload}))\n    console.log(num, diff);\n    // Uploaded and request pdf quiz\n    if(state.uploaded_pdf == true && state.prev_request_is_pdf == true){\n      // Get PDF Text\n      try{\n        tools.reply(\"Please wait...\")\n        state.prev_request_is_pdf = false;\n        state.uploaded_pdf = false;\n        // console.log(state.base_api + state.get_text)\n        const res_txt = await fetch(state.base_api + state.get_text);\n        const res_json = await res_txt.json();\n        const txt = res_json.text;\n        // console.log(txt);\n        let prev_qs = ''\n        for (let i = 0; i < num; i++) {\n          res = await tools.generate_quiz({context: txt, questions: prev_qs, diff: diff});\n          prev_qs = prev_qs + res + '\\n'\n          tools.reply(res);\n        }\n      }\n      catch (err){\n        console.log(\"Error: \", err);\n        tools.reply(\"There seems to be a problem right now. Try uploading the PDF again.\")\n      } \n    }else{\n      // Generate quiz from the payload\n      state.prev_request_is_pdf = false;\n      let prev_qs = ''\n      for(i=0; i < num; i++){\n        res = await tools.generate_quiz({context: payload, questions: prev_qs, diff: diff});\n        prev_qs = prev_qs + res;\n        // console.log(res);\n        tools.reply(res);\n      }\n    }\n\n    tools.reply(\"What quiz would you like me to generate?\")\n  }\n}\n\n/** Startup.\n * @param {AppState} state the state of the app\n * @param {Tool} tools available tools to perform a task\n */\nasync function startup(state, tools) {\n  state.base_api = \"https://quiz-generator-zia4ieef3q-uc.a.run.app/\";\n  state.get_text = \"upload_pdf/get_text\"\n  state.requested_pdf = false;\n  state.uploaded_pdf = false;\n  state.prev_request_is_pdf = false;\n  tools.reply(`\n  Hello, I can help generate quizzes from your PDFs or just on general topics that you suggest\\n\n  If you require quizzes from a pdf, follow these steps:\n  - Upload the PDF here first: ${state.base_api}\n  - Call on me to help generate the quiz. An example of the prompt is: 'Generate latest quiz from pdf'\n  `);\n\n  tools.reply(\"What quiz would you like me to generate today?\")\n}\n\n/** Unit test.\n * @param {Test} test define a test case\n * @param {Tool} tools available tools to perform a task\n */\nfunction unitTest(test, tools) {\n  test(\"Test 1\", 1, async (expect) => {\n    expect(true).toBeTrue();\n  });\n}\n","llmFunctions":[{"functionName":"parseNumber","description":"Parse a number from the users' message. You can provide a hint for the bot to better understant the context\n\nWhat happens if you don't tell the bot that the number can be presented in different ways? Give it a try!\n","arguments":["message","hint"],"enableMemory":false,"messageHistory":["memoryPlaceholder",{"role":"system","content":"Your job is to detect a number from the message. \nThe number may be represented in different ways:\n- Arabic numerals.\n- word or character in different languages.\n- adjectives or nouns that reflect a number with given hint, for example, if the hint says the total number is 100, the message \"half\" implies 50.\n\nyou have to think, and answer as good as you can. If you still can't determine, just treat it as 0.\n\nReply with the format below in JSON: ###\n{\n  \"reason\": \"\",  // a string describing why you choose the number\n  \"number\": 0 // Arabic numerals detected\n}\n###"},{"role":"user","content":"Hint: {{hint}}\nMessage: {{message}}"}],"stream":false,"parameters":{"maxResponse":200,"temperature":0,"topP":0.95,"frequencyPenalty":0,"presencePenalty":0}},{"functionName":"generate_quiz","description":"Generates an MCQ quiz for users","arguments":["context","questions","diff"],"enableMemory":false,"messageHistory":["memoryPlaceholder",{"role":"system","content":"You are an expert in creating quizzes given a context. You need to read the context carefully, line by line and understand it well.\n\nYour job is to help students learn. This is done by reading a context provided carefully.\n\nThe context provided will be messy. Read the context line-by-line, word-by-word and try to understand it well enough till you are an expert on the topic.\n\nYou will then create a list of multiple choice questions, each with 4 possible choices. For each question, you will need to provide the right response and an explanation as to why this is the answer.\n\nYou will also receive other questions related to the topic. Ensure that you create a variety of questions, and not ask the same questions.\n\nYou just need to generate ONLY ONE question.\n\nYou are to make the difficulty of the question based on the user's input.\n\nYour response should be in markdown format, and should be something like this:\nQuestion: {Question text}\nChoices:\n1) {Choice 1}\n2) {Choice 2}\n3) {Choice 3}\n4) {Choice 4}\n\nAnswer: {right choice}\nExplanation: {explain why this is the right choice}"},{"role":"user","content":"Context: {{context}}\nPrevious questions: {{questions}}\nDifficulty: {{diff}}"}],"stream":false,"parameters":{"maxResponse":4096,"temperature":0.5,"topP":0.6,"frequencyPenalty":0,"presencePenalty":0},"functions":[]},{"functionName":"yesOrNo","description":"Determines if the answer to a question is a 'yes' or 'no'","arguments":["question","answer"],"enableMemory":false,"messageHistory":["memoryPlaceholder",{"role":"system","content":"Your job is to check if the answer is considered yes or no for the question. \nThe answer may not directly answer the question, you have to think, and answer as much as you can. \nIf you still can't determine, just treat it as no. \nReply with the format below in JSON:\n{\n  \"reason\": \"\",  // a string describing why you think it's true or false\n  \"yes\": true, // or false\n}"},{"role":"user","content":"Question: {{question}}\nAnswer: {{answer}}"}],"stream":false,"parameters":{"maxResponse":100,"temperature":0.1,"topP":0.95,"frequencyPenalty":0,"presencePenalty":0},"functions":[]},{"functionName":"is_user_asking_to_use_pdf","description":"Checks if the user is asking to generate a quiz via PDF","arguments":["userMessage"],"enableMemory":false,"messageHistory":["memoryPlaceholder",{"role":"system","content":"You are an assistant in figuring out the meaning of user's messages. Your primary job is to understand if the user's message is asking to generate quizzes from PDFs. \n\nYou need to read the user's message carefully, and evaluate it step-by-step\n\nAn example of how a user may ask is: \"Help generate a quiz from pdf\"\n\nYou must return your response in JSON format:\n{\nyes: bool// true or false as to whether the user is asking to generate quiz from pdf\nexplanation: string // your thought process as to why you think that is the answer\n}"},{"role":"user","content":"{{userMessage}}"}],"stream":false,"parameters":{"maxResponse":100,"temperature":0.1,"topP":0.95,"frequencyPenalty":0,"presencePenalty":0},"functions":[]},{"functionName":"quiz_details","description":"Gets the quiz details from the message, such as difficulty and number of questions","arguments":["userMessage"],"enableMemory":false,"messageHistory":["memoryPlaceholder",{"role":"system","content":"You are a helpful assistant.\n\nYour primary objective is to read the user's message and determine the quiz details.\n\nThe quiz details you are interested in finding is:\n1) Number of questions quiz should have\n2) Difficulty of the quiz\n\nRead the users message carefully. The message may not contain the quiz details. In such a scenario, use the default values.\n\nReturn your findings in a JSON format:\n{\nnum: number // number of questions that user has specified, default = 5\ndiff: string // difficulty of the quiz, default = medium\n}\n\nIf you are unable to determine details of the quiz, use the default values. {num: 5, diff: medium}"},{"role":"user","content":"{{userMessage}}"}],"stream":false,"parameters":{"maxResponse":100,"temperature":0.1,"topP":0.9,"frequencyPenalty":0,"presencePenalty":0},"functions":[]}]}